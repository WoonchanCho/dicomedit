export default class DE6ParserListener {
    enterScript(ctx: any): void;
    exitScript(ctx: any): void;
    enterSeparator(ctx: any): void;
    exitSeparator(ctx: any): void;
    enterStatement(ctx: any): void;
    exitStatement(ctx: any): void;
    enterAction(ctx: any): void;
    exitAction(ctx: any): void;
    enterAssign_if_exists(ctx: any): void;
    exitAssign_if_exists(ctx: any): void;
    enterAssignment(ctx: any): void;
    exitAssignment(ctx: any): void;
    enterTagpathLvalue(ctx: any): void;
    exitTagpathLvalue(ctx: any): void;
    enterValue(ctx: any): void;
    exitValue(ctx: any): void;
    enterNumberTerm(ctx: any): void;
    exitNumberTerm(ctx: any): void;
    enterStringTerm(ctx: any): void;
    exitStringTerm(ctx: any): void;
    enterTagPathTerm(ctx: any): void;
    exitTagPathTerm(ctx: any): void;
    enterFunctionTerm(ctx: any): void;
    exitFunctionTerm(ctx: any): void;
    enterIdTerm(ctx: any): void;
    exitIdTerm(ctx: any): void;
    enterVariable(ctx: any): void;
    exitVariable(ctx: any): void;
    enterIntvalue(ctx: any): void;
    exitIntvalue(ctx: any): void;
    enterFloatvalue(ctx: any): void;
    exitFloatvalue(ctx: any): void;
    enterTermlist(ctx: any): void;
    exitTermlist(ctx: any): void;
    enterMethod(ctx: any): void;
    exitMethod(ctx: any): void;
    enterDe_function(ctx: any): void;
    exitDe_function(ctx: any): void;
    enterDeletion(ctx: any): void;
    exitDeletion(ctx: any): void;
    enterEcho(ctx: any): void;
    exitEcho(ctx: any): void;
    enterConditional_statement(ctx: any): void;
    exitConditional_statement(ctx: any): void;
    enterCondition(ctx: any): void;
    exitCondition(ctx: any): void;
    enterConditionOperator(ctx: any): void;
    exitConditionOperator(ctx: any): void;
    enterInitialization(ctx: any): void;
    exitInitialization(ctx: any): void;
    enterDescribeNamedVariable(ctx: any): void;
    exitDescribeNamedVariable(ctx: any): void;
    enterDescribeHiddenVariable(ctx: any): void;
    exitDescribeHiddenVariable(ctx: any): void;
    enterDescribeConstantVariable(ctx: any): void;
    exitDescribeConstantVariable(ctx: any): void;
    enterDescribeImmutableVariable(ctx: any): void;
    exitDescribeImmutableVariable(ctx: any): void;
    enterDe_export(ctx: any): void;
    exitDe_export(ctx: any): void;
    enterRemoveAllPrivateTags(ctx: any): void;
    exitRemoveAllPrivateTags(ctx: any): void;
    enterVersion(ctx: any): void;
    exitVersion(ctx: any): void;
    enterTag(ctx: any): void;
    exitTag(ctx: any): void;
    enterElement(ctx: any): void;
    exitElement(ctx: any): void;
    enterSeq_element(ctx: any): void;
    exitSeq_element(ctx: any): void;
    enterTagpath(ctx: any): void;
    exitTagpath(ctx: any): void;
    enterItemnumber(ctx: any): void;
    exitItemnumber(ctx: any): void;
    enterSeq_wildcard(ctx: any): void;
    exitSeq_wildcard(ctx: any): void;
    enterPublic_tag(ctx: any): void;
    exitPublic_tag(ctx: any): void;
    enterPvt_tag(ctx: any): void;
    exitPvt_tag(ctx: any): void;
}
